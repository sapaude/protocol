// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: go_sapaude_backend_admin.proto

package go_sapaude_backend_admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoSapaudeBackendAdmin_Login_FullMethodName        = "/go_sapaude_backend_admin.GoSapaudeBackendAdmin/Login"
	GoSapaudeBackendAdmin_RegisterUser_FullMethodName = "/go_sapaude_backend_admin.GoSapaudeBackendAdmin/RegisterUser"
	GoSapaudeBackendAdmin_GetUser_FullMethodName      = "/go_sapaude_backend_admin.GoSapaudeBackendAdmin/GetUser"
)

// GoSapaudeBackendAdminClient is the client API for GoSapaudeBackendAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户服务定义
type GoSapaudeBackendAdminClient interface {
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// 注册用户
	RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserRsp, error)
	// 获取用户
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResponseRsp, error)
}

type goSapaudeBackendAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewGoSapaudeBackendAdminClient(cc grpc.ClientConnInterface) GoSapaudeBackendAdminClient {
	return &goSapaudeBackendAdminClient{cc}
}

func (c *goSapaudeBackendAdminClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, GoSapaudeBackendAdmin_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goSapaudeBackendAdminClient) RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserRsp)
	err := c.cc.Invoke(ctx, GoSapaudeBackendAdmin_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goSapaudeBackendAdminClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResponseRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponseRsp)
	err := c.cc.Invoke(ctx, GoSapaudeBackendAdmin_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoSapaudeBackendAdminServer is the server API for GoSapaudeBackendAdmin service.
// All implementations must embed UnimplementedGoSapaudeBackendAdminServer
// for forward compatibility.
//
// 用户服务定义
type GoSapaudeBackendAdminServer interface {
	// 登录
	Login(context.Context, *LoginReq) (*LoginRsp, error)
	// 注册用户
	RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserRsp, error)
	// 获取用户
	GetUser(context.Context, *GetUserReq) (*GetUserResponseRsp, error)
	mustEmbedUnimplementedGoSapaudeBackendAdminServer()
}

// UnimplementedGoSapaudeBackendAdminServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoSapaudeBackendAdminServer struct{}

func (UnimplementedGoSapaudeBackendAdminServer) Login(context.Context, *LoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGoSapaudeBackendAdminServer) RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedGoSapaudeBackendAdminServer) GetUser(context.Context, *GetUserReq) (*GetUserResponseRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedGoSapaudeBackendAdminServer) mustEmbedUnimplementedGoSapaudeBackendAdminServer() {}
func (UnimplementedGoSapaudeBackendAdminServer) testEmbeddedByValue()                               {}

// UnsafeGoSapaudeBackendAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoSapaudeBackendAdminServer will
// result in compilation errors.
type UnsafeGoSapaudeBackendAdminServer interface {
	mustEmbedUnimplementedGoSapaudeBackendAdminServer()
}

func RegisterGoSapaudeBackendAdminServer(s grpc.ServiceRegistrar, srv GoSapaudeBackendAdminServer) {
	// If the following call pancis, it indicates UnimplementedGoSapaudeBackendAdminServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoSapaudeBackendAdmin_ServiceDesc, srv)
}

func _GoSapaudeBackendAdmin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSapaudeBackendAdminServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoSapaudeBackendAdmin_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSapaudeBackendAdminServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoSapaudeBackendAdmin_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSapaudeBackendAdminServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoSapaudeBackendAdmin_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSapaudeBackendAdminServer).RegisterUser(ctx, req.(*RegisterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoSapaudeBackendAdmin_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSapaudeBackendAdminServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoSapaudeBackendAdmin_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSapaudeBackendAdminServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoSapaudeBackendAdmin_ServiceDesc is the grpc.ServiceDesc for GoSapaudeBackendAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoSapaudeBackendAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_sapaude_backend_admin.GoSapaudeBackendAdmin",
	HandlerType: (*GoSapaudeBackendAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _GoSapaudeBackendAdmin_Login_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _GoSapaudeBackendAdmin_RegisterUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _GoSapaudeBackendAdmin_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go_sapaude_backend_admin.proto",
}
